import asyncio
from datetime import datetime, date
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ChatType
from aiogram import Router
from tinydb import TinyDB, Query

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
# <-- —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = '7173022502:AAFfhEq_iqAvUNE3JTX8HcHB8PgZqhtbkTY'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# === TinyDB –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ===
db = TinyDB('challenge_data.json')
Challenge = Query()


def save_challenge(chat_id, data):
    db.upsert({**data, 'chat_id': chat_id}, Challenge.chat_id == chat_id)


def load_challenge(chat_id):
    return db.get(Challenge.chat_id == chat_id)


def delete_challenge(chat_id):
    db.remove(Challenge.chat_id == chat_id)


def get_all_challenges():
    return db.all()

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===


@router.message(Command('start'))
async def start_handler(message: Message):
    if message.chat.type in (ChatType.GROUP, ChatType.SUPERGROUP):
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —á–µ–ª–ª–µ–Ω–¥–∂–∞? (–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ)")
    else:
        await message.answer("–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")


@router.message(Command('status'))
async def status_handler(message: Message):
    chat_id = message.chat.id
    data = load_challenge(chat_id)

    if not data or data.get('waiting_for_total_days'):
        await message.answer("–ß–µ–ª–ª–µ–Ω–¥–∂ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
        return

    now = datetime.now().date()
    start_date = date.fromisoformat(data['start_date'])
    days_passed = (now - start_date).days
    current_day = data['current_day'] + days_passed
    total_days = data['total_days']
    days_left = (data['current_day'] + total_days) - current_day

    if days_left >= 0:
        await message.answer(f"–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å ‚Ññ{current_day} —á–µ–ª–ª–µ–Ω–¥–∂–∞!\n–û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π.")
    else:
        await message.answer("–ß–µ–ª–ª–µ–Ω–¥–∂ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")


@router.message(Command('stop'))
async def stop_handler(message: Message):
    chat_id = message.chat.id
    if load_challenge(chat_id):
        delete_challenge(chat_id)
        await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")


@router.message()
async def message_handler(message: Message):
    chat_id = message.chat.id
    data = load_challenge(chat_id)

    if not data:
        if message.text.isdigit():
            save_challenge(chat_id, {
                'current_day': int(message.text),
                'waiting_for_total_days': True
            })
            await message.answer("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è —á–µ–ª–ª–µ–Ω–¥–∂?")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    elif data.get('waiting_for_total_days'):
        if message.text.isdigit():
            data['total_days'] = int(message.text)
            data['start_date'] = datetime.now().date().isoformat()
            data['waiting_for_total_days'] = False
            save_challenge(chat_id, data)
            await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# === –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===


async def daily_challenge_sender():
    while True:
        now = datetime.now().date()
        for data in get_all_challenges():
            if not data.get('waiting_for_total_days'):
                chat_id = data['chat_id']
                start_date = date.fromisoformat(data['start_date'])
                days_passed = (now - start_date).days
                current_day = data['current_day'] + days_passed
                total_days = data['total_days']

                if current_day <= data['current_day'] + total_days - 1:
                    try:
                        await bot.send_message(chat_id, f"–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å ‚Ññ{current_day} —á–µ–ª–ª–µ–Ω–¥–∂–∞!")
                    except Exception as e:
                        print(
                            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
                elif current_day == data['current_day'] + total_days:
                    try:
                        await bot.send_message(chat_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ß–µ–ª–ª–µ–Ω–¥–∂ –∑–∞–≤–µ—Ä—à—ë–Ω! üéâ")
                        delete_challenge(chat_id)
                    except Exception as e:
                        print(
                            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
        await asyncio.sleep(86400)  # 24 —á–∞—Å–∞

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===


async def main():
    asyncio.create_task(daily_challenge_sender())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
